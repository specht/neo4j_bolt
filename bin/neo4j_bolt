#!/usr/bin/env ruby

begin
    require "neo4j_bolt"
rescue LoadError
    require "bundler/setup"
    require "neo4j_bolt"
end
require "gli"

include Neo4jBolt

ENV['GLI_DEBUG'] = 'true'

class App
    extend GLI::App

    program_desc 'run various Neo4j housekeeping tasks'
    version Neo4jBolt::VERSION

    flag [:v, :verbosity], :default_value => 0
    flag [:h, :host], :default_value => 'localhost:7687'

    pre do |global_options, command, options, args|
        host = global_options[:host]
        Neo4jBolt.bolt_host = host.split(':').first
        Neo4jBolt.bolt_port = host.split(':').last.to_i
        Neo4jBolt.bolt_verbosity = global_options[:verbosity].to_i
        true
    end

    # --------------------------------------------

    desc 'Console'
    command :console do |c|
        c.action do
            require "irb"
            IRB.start(__FILE__)
        end
    end

    # --------------------------------------------

    desc 'Dump database'
    long_desc 'Dump all nodes and relationships.'
    command :dump do |c|
        c.flag [:o, 'out-file'.to_sym], :default_value => '/dev/stdout'
        c.action do |global_options, options|
            File.open(options['out-file'.to_sym], 'w') do |f|
                dump_database(f)
            end
        end
    end

    # --------------------------------------------

    desc 'Load database dump'
    long_desc 'Load nodes and relationships from a database dump.'
    command :load do |c|
        # c.flag [:i, :in_file], :desc => 'input path', :required => true
        c.switch [:f, :force], :default_value => false, :desc => 'force appending nodes even if the database is not empty'
        c.action do |global_options, options, args|
            help_now!('input path is required') if args.empty?
            path = args.shift
            File.open(path, 'r') do |f|
                load_database_dump(f, force_append: options[:force])
            end
        end
    end

    # --------------------------------------------

    desc 'Clear database'
    long_desc 'Clear all nodes and relationships'
    command :clear do |c|
        c.switch [:srsly], :required => true, :negatable => false, :desc => 'Specify --srsly to really clear the database'
        c.action do |global_options, options, args|
            if options[:srsly]
                neo4j_query("MATCH (n) DETACH DELETE n;")
            else
                STDERR.puts "Doing nothing unless you specify --srsly."
            end
        end
    end

    # --------------------------------------------

    desc 'Show or remove constraints and indexes'
    # long_desc 'Clear all nodes and relationships'
    command :index do |c|
        c.command :ls do |c2|
            c2.action do |global_options, options, args|
                neo4j_query("SHOW ALL CONSTRAINTS") do |row|
                    puts "#{row['type']} #{row['name']} #{(row['labelsOrTypes'] || []).join('/')}/#{(row['properties'] || []).join('/')}"
                end
                neo4j_query("SHOW ALL INDEXES") do |row|
                    puts "#{row['uniqueness']} #{row['entityType']} #{row['state']} #{row['populationPercent']}% #{row['name']} #{(row['labelsOrTypes'] || []).join('/')}/#{(row['properties'] || []).join('/')}"
                end
            end
        end
        c.command :rm do |c2|
            c2.switch [:f, :force], :required => true, :negatable => false, :desc => 'Specify --force to really remove all constraints and indexes'
            c2.action do |global_options, options, args|
                if options[:force]
                    all_constraints = []
                    all_indexes = []
                    neo4j_query("SHOW ALL CONSTRAINTS") do |row|
                        all_constraints << row['name']
                    end
                    neo4j_query("SHOW ALL INDEXES") do |row|
                        all_indexes << row['name']
                    end
                    transaction do
                        all_constraints.each do |name|
                            STDERR.puts "Removing constraint #{name}"
                            neo4j_query("DROP CONSTRAINT #{name} IF EXISTS")
                        end
                        all_indexes.each do |name|
                            STDERR.puts "Removing index #{name}"
                            neo4j_query("DROP INDEX #{name} IF EXISTS")
                        end
                    end
                else
                    STDERR.puts "Doing nothing unless you specify --force."
                end
            end
        end
    end

    # --------------------------------------------

    desc 'Visualize database'
    long_desc 'Generate a GraphViz-formatted visual representation of the database'
    command :visualize do |c|
        c.flag [:o, :out_file], :default_value => '/dev/stdout'
        # c.switch [:p, :properties], :default_value => false, :desc => 'include properties'
        c.action do |global_options, options|
            File.open(options[:out_file], 'w') do |f|
                all_labels = Set.new()

                TR = {'String' => 'string',
                      'Array' => 'list',
                      'Hash' => 'hash',
                      'TrueClass' => 'true',
                      'FalseClass' => 'false',
                      'NilClass' => 'null',
                      'Integer' => 'int',
                      'Float' => 'float'
                    }

                neo4j_query("MATCH (n) RETURN DISTINCT labels(n) AS labels") do |entry|
                    labels = entry['labels']
                    if labels.size != 1
                        raise "multiple labels per node not supported yet: #{labels.join(' ')}"
                    end
                    all_labels << labels.first
                end

                all_relationships = Set.new()

                neo4j_query("MATCH (a)-[r]->(b) RETURN DISTINCT labels(a) AS la, type(r) AS t, labels(b) AS lb;") do |entry|
                    la = entry['la'].first
                    t = entry['t']
                    lb = entry['lb'].first
                    all_relationships << "#{la}/#{t}/#{lb}"
                end

                properties_for_label = {}
                counts_for_label = {}

                all_labels.to_a.each do |label|
                    properties_for_label[label] ||= {}
                    neo4j_query("MATCH (n:#{label}) RETURN n") do |entry|
                        counts_for_label[label] ||= 0
                        counts_for_label[label] += 1
                        node = entry['n']
                        node.each_pair do |key, value|
                            properties_for_label[label][key] ||= {:classes => Set.new(), :counts => {}, :min => {}, :max => {}, :sum => {}}
                            c = TR[value.class.to_s] || value.class.to_s
                            properties_for_label[label][key][:classes] << c
                            properties_for_label[label][key][:counts][c] ||= 0
                            properties_for_label[label][key][:counts][c] += 1
                            sz = if c == 'string' || c == 'list'
                                value.size
                            elsif c == 'int' || c == 'float'
                                value
                            else
                                nil
                            end
                            unless sz.nil?
                                properties_for_label[label][key][:min][c] ||= sz
                                properties_for_label[label][key][:min][c] = [properties_for_label[label][key][:min][c], sz].min
                                properties_for_label[label][key][:max][c] ||= sz
                                properties_for_label[label][key][:max][c] = [properties_for_label[label][key][:max][c], sz].max
                                properties_for_label[label][key][:sum][c] ||= 0
                                properties_for_label[label][key][:sum][c] += sz
                            end
                        end
                    end
                end

                all_relationships.each do |s|
                    properties_for_label[s] ||= {}
                    parts = s.split('/')
                    la = parts[0]
                    type = parts[1]
                    lb = parts[2]
                    neo4j_query("MATCH (a:#{la})-[r:#{type}]->(b:#{lb}) RETURN r") do |entry|
                        counts_for_label[s] ||= 0
                        counts_for_label[s] += 1
                        rel = entry['r']
                        rel.each_pair do |key, value|
                            properties_for_label[s][key] ||= {:classes => Set.new(), :counts => {}, :min => {}, :max => {}, :sum => {}}
                            c = TR[value.class.to_s] || value.class.to_s
                            properties_for_label[s][key][:classes] << c
                            properties_for_label[s][key][:counts][c] ||= 0
                            properties_for_label[s][key][:counts][c] += 1
                            sz = if c == 'string' || c == 'list'
                                value.size
                            elsif c == 'int' || c == 'float'
                                value
                            else
                                nil
                            end
                            unless sz.nil?
                                properties_for_label[s][key][:min][c] ||= sz
                                properties_for_label[s][key][:min][c] = [properties_for_label[s][key][:min][c], sz].min
                                properties_for_label[s][key][:max][c] ||= sz
                                properties_for_label[s][key][:max][c] = [properties_for_label[s][key][:max][c], sz].max
                                properties_for_label[s][key][:sum][c] ||= 0
                                properties_for_label[s][key][:sum][c] += sz
                            end
                        end
                    end
                end

                indexes = {}
                INDEX_TR = {
                    'UNIQUENESS' => '<u>unique</u>',
                    'BTREE' => 'indexed',
                }

                ['SHOW ALL CONSTRAINTS', 'SHOW ALL INDEXES'].each do |query|
                    neo4j_query(query) do |row|
                        # STDERR.puts row.to_json
                        labels_or_types = row['labelsOrTypes'] || []
                        properties = row['properties'] || []
                        type = row['type']
                        entity = row['entityType']
                        if labels_or_types.size == 1 && properties.size == 1
                            label_or_type = labels_or_types.first
                            property = properties.first
                            indexes[entity.downcase.to_sym] ||= {}
                            indexes[entity.downcase.to_sym][label_or_type] ||= {}
                            indexes[entity.downcase.to_sym][label_or_type][property] ||= Set.new()
                            indexes[entity.downcase.to_sym][label_or_type][property] << type
                        end
                    end
                end

                dot = StringIO.open do |io|
                    print_properties = lambda do |props, lbl, rel|
                        label = ''
                        (props[lbl] || {}).keys.sort do |a, b|
                            partsa = Set.new()
                            ((((indexes[:node] || {})[lbl] || {})[a.to_s]) || Set.new()).each { |it| partsa << INDEX_TR[it] || it }
                            partsb = Set.new()
                            ((((indexes[:node] || {})[lbl] || {})[b.to_s]) || Set.new()).each { |it| partsb << INDEX_TR[it] || it }
                            (partsa.size == partsb.size) ? (a <=> b) : (partsb.size <=> partsa.size)
                        end.each do |key|
                            props[lbl][key][:classes].to_a.sort.each.with_index do |c, i|
                                label += "<tr>"
                                if i == 0
                                    parts = Set.new()
                                    ((((indexes[:node] || {})[lbl] || {})[key.to_s]) || Set.new()).each do |it|
                                        parts << INDEX_TR[it] || it
                                    end
                                    index_s = parts.empty? ? '' : " <i>(#{parts.join(', ')})</i>"
                                    label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='left' colspan='1' rowspan='#{props[lbl][key][:classes].size}'>#{key}#{index_s}</td>"
                                end
                                label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='left' colspan='1'>#{TR[c] || c}</td>"
                                label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='right' colspan='1'>#{sprintf('%d%%', props[lbl][key][:counts][c] * 100.0 / counts_for_label[lbl])}</td>"
                                if props[lbl][key][:sum][c]
                                    mean_s = sprintf('%1.1f', props[lbl][key][:sum][c].to_f / props[lbl][key][:counts][c]).chomp('.0')
                                    min_s = (c == 'float') ? sprintf('%1.1f', props[lbl][key][:min][c]) : props[lbl][key][:min][c]
                                    max_s = (c == 'float') ? sprintf('%1.1f', props[lbl][key][:max][c]) : props[lbl][key][:max][c]
                                    if c == 'int' && key[0, 2] == 'ts'
                                        min_s = Time.at(props[lbl][key][:min][c]).strftime('%Y-%m-%d')
                                        max_s = Time.at(props[lbl][key][:max][c]).strftime('%Y-%m-%d')
                                    end
                                    if props[lbl][key][:min][c] == props[lbl][key][:max][c]
                                        label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='center' colspan='6'>#{min_s}</td>"
                                    else
                                        if c == 'int' && key[0, 2] == 'ts'
                                            label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='right' colspan='3'>#{min_s}</td>"
                                            label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='right' colspan='3'>#{max_s}</td>"
                                        else
                                            label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='right' colspan='2'>#{min_s}</td>"
                                            label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='right' colspan='2'>#{mean_s}</td>"
                                            label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='right' colspan='2'>#{max_s}</td>"
                                        end
                                    end
                                else
                                    label += "<td border='1' color='#{rel ? '#888888' : '#000000'}' valign='top' align='left' colspan='6'></td>"
                                end
                                label += "</tr>"
                            end
                        end
                        label
                    end

                    io.puts "digraph {"
                    io.puts "graph [fontname = Helvetica, fontsize = 10, nodesep = 0.2, ranksep = 0.3];"
                    io.puts "node [fontname = Helvetica, fontsize = 10, shape = none, margin = 0];"
                    io.puts "edge [fontname = Helvetica, fontsize = 10, arrowsize = 0.6, color = \"#000000\"];"
                    io.puts 'rankdir=LR;'
                    io.puts 'splines=true;'
                    properties_for_label.keys.sort.each do |lbl|
                        label = "<<table valign='top' align='left' border='0' cellborder='0' cellspacing='0' cellpadding='4'>"
                        label += "<tr><td border='1' bgcolor='#fce94f' valign='top' align='left' colspan='9'><b>#{lbl}</b>"
                        label += " <i>(#{counts_for_label[lbl]})</i>"
                        label += "</td></tr>"
                        label += print_properties.call(properties_for_label, lbl, false)
                        label += "</table>>"
                        io.puts "\"#{lbl}\" [label = #{label}, pencolor = \"#000000\"];"
                    end
                    all_relationships.each do |s|
                        parts = s.split('/')
                        la = parts[0]
                        type = parts[1]
                        lb = parts[2]

                        label = "<<table valign='top' align='left' border='0' cellborder='0' cellspacing='0' cellpadding='4'>"
                        label += "<tr><td border='1' color='#888888' bgcolor='#d3d7cf' valign='top' align='left' colspan='9'>#{type}"
                        label += " <i>(#{counts_for_label[s]})</i>"
                        label += "</td></tr>"
                        label += print_properties.call(properties_for_label, s, true)

                        label += "</table>>"
                        io.puts "\"#{s}\" [label = #{label}, pencolor = \"#000000\"];"

                        cardinality = (counts_for_label[la] > counts_for_label[s]) ?
                            "#{sprintf('%1.1f', counts_for_label[la].to_f / counts_for_label[s]).chomp('.0')}:1" :
                            "1:#{sprintf('%1.1f', counts_for_label[s].to_f / counts_for_label[la]).chomp('.0')}"
                        io.puts "\"#{la}\" -> \"#{s}\" [label = \"#{cardinality}\", fontcolor=\"#888888\"];"
                        cardinality = (counts_for_label[lb] > counts_for_label[s]) ?
                            "1:#{sprintf('%1.1f', counts_for_label[lb].to_f / counts_for_label[s]).chomp('.0')}" :
                            "#{sprintf('%1.1f', counts_for_label[s].to_f / counts_for_label[lb]).chomp('.0')}:1"
                        io.puts "\"#{s}\" -> \"#{lb}\" [label = \"#{cardinality}\", fontcolor=\"#888888\"];"
                    end

                    io.puts "}"
                    io.string
                end
                f.puts dot
            end
        end
    end

end

exit App.run(ARGV)
